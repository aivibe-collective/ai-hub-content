name: Test Coverage

on:
  push:
    branches: [ main ]
    paths:
      - 'cloud_function/**'
      - 'test/test_cloud_function_*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'cloud_function/**'
      - 'test/test_cloud_function_*.py'
  # Run weekly to ensure coverage doesn't degrade
  schedule:
    - cron: '0 0 * * 1'  # Monday at midnight UTC
  # Allow manual triggering
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        # Install additional dependencies for testing
        pip install flask google-cloud-firestore google-cloud-pubsub
    
    - name: Test with pytest and generate coverage
      run: |
        pytest test/test_cloud_function_*.py --cov=cloud_function --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.GIST_ID }}
        filename: cloud_function_coverage.json
        label: coverage
        message: ${{ env.COVERAGE }}%
        color: ${{ env.COLOR }}
        namedLogo: python
      env:
        COVERAGE: ${{ steps.coverage.outputs.coverage }}
        COLOR: ${{ steps.coverage.outputs.color }}
    
    - name: Generate coverage report
      id: coverage
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'] * 100)")
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          echo "color=red" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "color=yellow" >> $GITHUB_OUTPUT
        else
          echo "color=green" >> $GITHUB_OUTPUT
        fi
    
    - name: Create coverage report artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
        retention-days: 14
